package main

import "fmt"

func main() {
	array := [6]int{1, 2, 3, 4, 5, 6}
	revers(&array)
	fmt.Println(array)
	//fmt.Println(a)
}

func revers(array *[6]int) {
	//этот подход экономит использование памяти и более рациональный
	/*Использующий обмен элементов на месте, остается предпочтительным,
	поскольку:
	Гарантирует корректность результата в любых условиях.
	Не зависит от особенностей работы range.
	Более эффективен (не создает временные массивы).*/

	/*n := len(*array)
	for i := 0; i < n/2; i++ {
		(*array)[i], (*array)[n-1-i] = (*array)[n-1-i], (*array)[i]
	}*/

	/*Этот метод работает только при следующих условиях:
	Вы полностью перезаписываете массив, то есть длина массива (n) — фиксированная, и весь массив участвует в итерации.
	Итерации не зависят от уже измененных значений.
	Но если потребуется:
	Работа с частичным реверсом массива.
	Изменение алгоритма итерации (например, обратный порядок или другой шаг).
	Более сложная структура данных.
	В таких случаях текущий подход может привести к ошибкам.*/

	for index, value := range *array {
		(*array)[len(array)-1-index] = value
	}
}
